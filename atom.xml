<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://abigonion.github.io</id>
    <title>LD技术分享</title>
    <updated>2022-02-14T05:41:23.616Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://abigonion.github.io"/>
    <link rel="self" href="https://abigonion.github.io/atom.xml"/>
    <subtitle>LD技术分享</subtitle>
    <logo>https://abigonion.github.io/images/avatar.png</logo>
    <icon>https://abigonion.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, LD技术分享</rights>
    <entry>
        <title type="html"><![CDATA[Solidity内存布局]]></title>
        <id>https://abigonion.github.io/post/nei-cun-bu-ju/</id>
        <link href="https://abigonion.github.io/post/nei-cun-bu-ju/">
        </link>
        <updated>2022-02-14T05:40:36.000Z</updated>
        <content type="html"><![CDATA[<p>Solidity保留了四个32字节的插槽，字节范围(包括端点)特定用途如下：</p>
<ul>
<li><code>0x00</code> - <code>0x3f</code> (64 字节): 用于哈希方法的暂存空间（临时空间）</li>
<li><code>0x40</code> - <code>0x5f</code> (32 字节): 当前分配的内存大小(也作为空闲内存指针)</li>
<li><code>0x60</code> - <code>0x7f</code> (32 字节): 零位插槽</li>
</ul>
<p>暂存空间可以在语句之间使用 (例如在内联汇编中)。 零位插槽用作动态内存数组的初始值，并且永远不应写入（空闲内存指针最初指向``0x80``）.</p>
<p>Solidity 总是将新对象放在空闲内存指针上，并且内存永远不会被释放(将来可能会改变)。</p>
<p>Solidity 中的内存数组中的元素始终占据32字节的倍数（对于 <code>byte[]</code> 总是这样，但对于 <code>bytes</code> 和 <code>string</code> 而言则不是）。</p>
<p>多维内存数组是指向内存数组的指针，动态数组的长度存储在数组的第一个插槽中，然后是数组元素。</p>
<p>警告</p>
<p>Solidity中有一些需要临时存储区的操作需要大于64个字节， 因此无法放入暂存空间。 它们将被放置在空闲内存指向的位置，但是由于使用寿命短，指针不会更新。 内存可以归零，也可以不归零。 因此，不应指望空闲内存指针指向归零内存区域。</p>
<p>尽管使用``msize``到达绝对归零的内存区域似乎是一个好主意，但使用此类非临时指针而不更新空闲内存指针可能会产生意外结果。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[全链路监控]]></title>
        <id>https://abigonion.github.io/post/quan-lian-lu-jian-kong/</id>
        <link href="https://abigonion.github.io/post/quan-lian-lu-jian-kong/">
        </link>
        <updated>2022-01-30T08:03:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="apm概念介绍">APM概念介绍</h2>
<p>APM(Application Performance Management)对应用程序性能和可用性的监控管理系统。它主要有这三个方面的内容，分别是 Logs(日志)、 Traces(链路追踪)和 Metrics(报表统计)。简单描述就是通过各种探针采集并上报数据，收集关键指标，同时搭配数据展示以实现对应用程序性能管理和故障管理的系统化解决方案。</p>
<h2 id="主流的开源apm产品">主流的开源APM产品</h2>
<p>CAT：是由国内美团点评开源的，基于Java语言开发，目前提供Java、C/C++、Node.js、Python、Go等语言的客户端，监控数据会全量统计，国内很多公司在用，例如美团点评、携程、拼多多等，使用的时候，需要在应用程序中埋点，对代码侵入性强。</p>
<p>Zipkin：由Twitter公司开发并开源，Java语言实现，侵入性相对于CAT要低一点，需要对web.xml之类的配置文件做修改，依然对代码有侵入。</p>
<p>Pinpoint：一个韩国团队开源的产品，运用了字节码增强技术，只需要在启动时添加启动参数即可，对代码无侵入，目前支持Java和PHP语言，底层采用HBase来存储数据，探针收集的数据粒度非常细，但是性能损耗大，因其出现的时间较长，完成度也很高。</p>
<p>SkyWalking：国人开源的产品，主要开发人员来自于华为，2019年4月17日Apache董事会批准SkyWalking成为顶级项目，支持Java、.Net、NodeJs等探针，数据存储支持Mysql、Elasticsearch等，跟Pinpoint一样采用字节码注入的方式实现代码的无侵入，探针采集数据粒度粗，但性能表现优秀，且对云原生支持，目前增长势头强劲，社区活跃，中文文档没有语言障碍。</p>
<h2 id="skywalking架构是怎样的">Skywalking架构是怎样的？</h2>
<p><img src="https://abigonion.github.io/post-images/1643529963334.png" alt="" loading="lazy"><br>
上述架构图中主要分为四个部分，如下：</p>
<ul>
<li>
<p>上面的Agent：负责收集日志数据，并且传递给中间的OAP服务器</p>
</li>
<li>
<p>中间的OAP：负责接收 Agent 发送的 Tracing 和Metric的数据信息，然后进行分析(Analysis Core) ，存储到外部存储器( Storage )，最终提供查询( Query )功能。</p>
</li>
<li>
<p>左面的UI：负责提供web控制台，查看链路，查看各种指标，性能等等。</p>
</li>
<li>
<p>右面Storage：负责数据的存储，支持多种存储类型。</p>
</li>
</ul>
<p>看了架构图之后，思路很清晰了，Agent负责收集日志传输数据，通过GRPC的方式传递给OAP进行分析并且存储到数据库中，最终通过UI界面将分析的统计报表、服务依赖、拓扑关系图展示出来。</p>
]]></content>
    </entry>
</feed>